#include <cilk.h>
#include <cilkview.h>
#include <iostream>
#include <ctime>
#include "../headers/graph.h"

using namespace std;
cilk::cilkview cv;

int min(int a, int b){ return a < b ? a : b;}

//Recursive implementation (SERIAL)
void AFW_serial(int ** x, int x_row_st, int x_col_st, 
			int u_row_st, int u_col_st, 
			int v_row_st, int v_col_st,
			int n, int m){

	//Error
	if(m > n)
		return;

	//Recursion base case
	if(n == m){
		int i,j,k; 
		for(k = 0; k < n; k++){
			for(i = 0; i < n; i++){
				for(j = 0; j < n; j++){
					x[x_row_st + i][x_col_st + j] = min( x[x_row_st + i][x_col_st + j], 
														(x[u_row_st + i][u_col_st + k] + x[v_row_st + k][v_col_st + j]) );
				}
			}
		}
	}
	else{
		int mid = n/2;

		//AFW (X11, U11, V11)
		AFW_serial(x, x_row_st, x_col_st, u_row_st, u_col_st, v_row_st, v_col_st, mid, m);
		
		//AFW (X12, U11, V12)
		AFW_serial(x, x_row_st, x_col_st + mid, u_row_st, u_col_st, v_row_st, v_col_st + mid, mid, m);

		//AFW (X21, U21, V11)
		AFW_serial(x, x_row_st + mid, x_col_st, u_row_st + mid, u_col_st, v_row_st, v_col_st, mid, m);

		//AFW (X22, U21, V12)
		AFW_serial(x, x_row_st + mid, x_col_st + mid, u_row_st + mid, u_col_st, v_row_st, v_col_st + mid, mid, m);

		//AFW (X22, U22, V22)
		AFW_serial(x, x_row_st + mid, x_col_st + mid, u_row_st + mid, u_col_st + mid, v_row_st + mid, v_col_st + mid, mid, m);

		//AFW (X21, U22, V21)
		AFW_serial(x, x_row_st + mid, x_col_st, u_row_st + mid, u_col_st + mid, v_row_st + mid, v_col_st, mid, m);

		//AFW (X12, U12, V22)
		AFW_serial(x, x_row_st, x_col_st + mid, u_row_st, u_col_st + mid, v_row_st + mid, v_col_st + mid, mid, m);

		//AFW (X11, U12, V21)
		AFW_serial(x, x_row_st, x_col_st, u_row_st, u_col_st + mid, v_row_st + mid, v_col_st, mid, m);

	}

}


//Recursive implementation (PARALLEL)
void AFW_parallel(int ** x, int x_row_st, int x_col_st, 
			int u_row_st, int u_col_st, 
			int v_row_st, int v_col_st,
			int n, int m){

	//Incase of wrong values entered at runtime.
	if(m > n)
		return;

	//Recursion base case
	if(n == m){
		int i,j,k; 
		for(k = 0; k < n; k++){
			for(i = 0; i < n; i++){
				for(j = 0; j < n; j++){
					x[x_row_st + i][x_col_st + j] = min( x[x_row_st + i][x_col_st + j], 
														(x[u_row_st + i][u_col_st + k] + x[v_row_st + k][v_col_st + j]) );
				}
			}
		}
	}
	else{
		int mid = n/2;

		//AFW (X11, U11, V11)
		AFW_parallel(x, x_row_st, x_col_st, u_row_st, u_col_st, v_row_st, v_col_st, mid, m);
		
		//AFW (X12, U11, V12)
		cilk_spawn AFW_parallel(x, x_row_st, x_col_st + mid, u_row_st, u_col_st, v_row_st, v_col_st + mid, mid, m);

		//AFW (X21, U21, V11)
		AFW_parallel(x, x_row_st + mid, x_col_st, u_row_st + mid, u_col_st, v_row_st, v_col_st, mid, m);

		cilk_sync;

		//AFW (X22, U21, V12)
		AFW_parallel(x, x_row_st + mid, x_col_st + mid, u_row_st + mid, u_col_st, v_row_st, v_col_st + mid, mid, m);

		//AFW (X22, U22, V22)
		AFW_parallel(x, x_row_st + mid, x_col_st + mid, u_row_st + mid, u_col_st + mid, v_row_st + mid, v_col_st + mid, mid, m);

		//AFW (X21, U22, V21)
		cilk_spawn AFW_parallel(x, x_row_st + mid, x_col_st, u_row_st + mid, u_col_st + mid, v_row_st + mid, v_col_st, mid, m);

		//AFW (X12, U12, V22)
		AFW_parallel(x, x_row_st, x_col_st + mid, u_row_st, u_col_st + mid, v_row_st + mid, v_col_st + mid, mid, m);

		cilk_sync;

		//AFW (X11, U12, V21)
		AFW_parallel(x, x_row_st, x_col_st, u_row_st, u_col_st + mid, v_row_st + mid, v_col_st, mid, m);

	}

}

int cilk_main(int arc, char * argv[]){
	int n, m;
	int ** x = NULL;
	int ** copy = NULL;
	long long start, end;
	cout << "Enter matrix size: \n";
	cin >> n;
	cout << "Enter base case size: \n";
	cin >> m;
	x = generate_matrix(n);
	copy = copy_matrix(x, n); 
/*
	start = clock();
	AFW_serial(x, 1, 1, 1, 1, 1, 1, n, m);	
	end = clock();
	cout << "Serial execution time: " << (end - start)/double(1000) << endl; 
*/		
	//cout << "Original matrix: " << endl;
	//print_matrix(x, n);	
	start = clock();
	//cv.start();
	AFW_parallel(copy, 1, 1, 1, 1, 1, 1, n, m);
	//cv.stop();
	end = clock();
	//cv.dump("main_tag");
	cout << "Parallel execution time: " << (end - start)/double(1000) << endl; 
	//print_matrix(copy, n);
	return 0;
}






