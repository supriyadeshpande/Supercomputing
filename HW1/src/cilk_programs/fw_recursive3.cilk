#include <cilk.h>
//#include <cilkview.h>
#include <iostream>
#include <ctime>
#include "../headers/graph.h"

using namespace std;

int min(int a, int b){ return a < b ? a : b;}

void loopFW(int ** x, int x_row_st, int x_col_st, 
			int u_row_st, int u_col_st, 
			int v_row_st, int v_col_st,
			int m){

	int i,j,k; 
	for(k = 0; k < m; k++){
		//cout << "k=" << k << endl;
		for(i = 0; i < m; i++){
			for(j = 0; j < m; j++){
				x[x_row_st + i][x_col_st + j] = min( x[x_row_st + i][x_col_st + j], 
													(x[u_row_st + i][u_col_st + k] + x[v_row_st + k][v_col_st + j]) );
			}
		}
	}

}

void DFW(int ** x, int x_row_st, int x_col_st, 
			int u_row_st, int u_col_st, 
			int v_row_st, int v_col_st,
			int n, int m){

		if(n > m)
			return;

		if(n == m){
			loopFW(x, x_row_st, x_col_st, u_row_st, u_col_st, v_row_st, v_col_st, m);
		}
		else{
			int mid = n/2;
			//DFW (X11, U11, V11)
			cilk_spawn DFW(x, x_row_st, x_col_st, u_row_st, u_col_st, v_row_st, v_col_st, mid, m);
			
			//DFW (X12, U11, V12)
			cilk_spawn DFW(x, x_row_st, x_col_st + mid, u_row_st, u_col_st, v_row_st, v_col_st + mid, mid, m);
			
			//DFW (X21, U21, V11)
			cilk_spawn DFW(x, x_row_st + mid, x_col_st, u_row_st + mid, u_col_st, v_row_st, v_col_st, mid, m);

			//DFW (X22, U21, V12)
			DFW(x, x_row_st + mid, x_col_st + mid, u_row_st + mid, u_col_st, v_row_st, v_col_st + mid, mid, m);

			cilk_sync;	

			//DFW (X11, U12, V21)
			cilk_spawn DFW(x, x_row_st, x_col_st, u_row_st, u_col_st + mid, v_row_st + mid, v_col_st, mid, m);

			//DFW (X12, U12, V22)
			cilk_spawn DFW(x, x_row_st, x_col_st + mid, u_row_st, u_col_st + mid, v_row_st + mid, v_col_st + mid, mid, m);

			//DFW (X21, U22, V21)
			cilk_spawn DFW(x, x_row_st + mid, x_col_st, u_row_st + mid, u_col_st + mid, v_row_st + mid, v_col_st, mid, m);

			//DFW (X22, U22, V22)
			DFW(x, x_row_st + mid, x_col_st + mid, u_row_st + mid, u_col_st + mid, v_row_st + mid, v_col_st + mid, mid, m);
	
			cilk_sync;
		}

		
}

void CFW(int ** x, int x_row_st, int x_col_st, 
			int u_row_st, int u_col_st, 
			int v_row_st, int v_col_st,
			int n, int m){

	if(m > n)
		return;

	if(n == m)
		loopFW(x, x_row_st, x_col_st, u_row_st, u_col_st, v_row_st, v_col_st, m);
	else{
		int mid = n/2;
		cilk_spawn CFW(x, x_row_st, x_col_st, u_row_st, u_col_st, v_row_st, v_col_st, mid, m);		
		CFW(x, x_row_st + mid, x_col_st, u_row_st + mid, u_col_st, v_row_st, v_col_st, mid, m);
		cilk_sync;

		cilk_spawn DFW(x, x_row_st, x_col_st + mid, u_row_st, u_col_st, v_row_st, v_col_st + mid, mid, m);
		DFW(x, x_row_st + mid, x_col_st + mid, u_row_st + mid, u_col_st, v_row_st, v_col_st + mid, mid, m);
		cilk_sync;

		cilk_spawn CFW(x, x_row_st, x_col_st + mid, u_row_st, u_col_st + mid, v_row_st + mid, v_col_st + mid, mid, m);
		CFW(x, x_row_st + mid, x_col_st + mid, u_row_st + mid, u_col_st + mid, v_row_st + mid, v_col_st + mid, mid, m);
		cilk_sync;

		cilk_spawn DFW(x, x_row_st, x_col_st, u_row_st, u_col_st + mid, v_row_st + mid, v_col_st, mid, m);	
		DFW(x, x_row_st + mid, x_col_st, u_row_st + mid, u_col_st + mid, v_row_st + mid, v_col_st, mid, m);
		cilk_sync;
	}
}

void BFW(int ** x, int x_row_st, int x_col_st, 
			int u_row_st, int u_col_st, 
			int v_row_st, int v_col_st,
			int n, int m){

	if(m > n)
		return;

	if(n == m)
		loopFW(x, x_row_st, x_col_st, u_row_st, u_col_st, v_row_st, v_col_st, m);
	else{
		int mid = n/2;
		cilk_spawn BFW(x, x_row_st, x_col_st, u_row_st, u_col_st, v_row_st, v_col_st, mid, m);
		BFW(x, x_row_st, x_col_st + mid, u_row_st, u_col_st, v_row_st, v_col_st + mid, mid, m);
		cilk_sync;

		cilk_spawn DFW(x, x_row_st + mid, x_col_st, u_row_st + mid, u_col_st, v_row_st, v_col_st, mid, m);
		DFW(x, x_row_st + mid, x_col_st + mid, u_row_st + mid, u_col_st, v_row_st, v_col_st + mid, mid, m);
		cilk_sync;

		cilk_spawn BFW(x, x_row_st + mid, x_col_st, u_row_st + mid, u_col_st + mid, v_row_st + mid, v_col_st, mid, m);
		BFW(x, x_row_st + mid, x_col_st + mid, u_row_st + mid, u_col_st + mid, v_row_st + mid, v_col_st + mid, mid, m);
		cilk_sync;

		cilk_spawn DFW(x, x_row_st, x_col_st, u_row_st, u_col_st + mid, v_row_st + mid, v_col_st, mid, m);
		DFW(x, x_row_st, x_col_st + mid, u_row_st, u_col_st + mid, v_row_st + mid, v_col_st + mid, mid, m);
		cilk_sync;
	}
}

//Recursive implementation (PARALLEL)
void AFW(int ** x, int x_row_st, int x_col_st, 
			int u_row_st, int u_col_st, 
			int v_row_st, int v_col_st,
			int n, int m){

	//Incase of wrong values entered at runtime.
	if(m > n)
		return;

	//Recursion base case
	if(n == m)
		loopFW(x, x_row_st, x_col_st, u_row_st, u_col_st, v_row_st, v_col_st, m);		
	else{
		int mid = n/2;

		//AFW (X11, U11, V11)
		AFW(x, x_row_st, x_col_st, u_row_st, u_col_st, v_row_st, v_col_st, mid, m);
		
		//BFW (X12, U11, V12)
		cilk_spawn BFW(x, x_row_st, x_col_st + mid, u_row_st, u_col_st, v_row_st, v_col_st + mid, mid, m);

		//CFW (X21, U21, V11)
		CFW(x, x_row_st + mid, x_col_st, u_row_st + mid, u_col_st, v_row_st, v_col_st, mid, m);

		cilk_sync;

		//DFW (X22, U21, V12)
		DFW(x, x_row_st + mid, x_col_st + mid, u_row_st + mid, u_col_st, v_row_st, v_col_st + mid, mid, m);

		//AFW (X22, U22, V22)
		AFW(x, x_row_st + mid, x_col_st + mid, u_row_st + mid, u_col_st + mid, v_row_st + mid, v_col_st + mid, mid, m);

		//BFW (X21, U22, V21)
		cilk_spawn BFW(x, x_row_st + mid, x_col_st, u_row_st + mid, u_col_st + mid, v_row_st + mid, v_col_st, mid, m);

		//CFW (X12, U12, V22)
		CFW(x, x_row_st, x_col_st + mid, u_row_st, u_col_st + mid, v_row_st + mid, v_col_st + mid, mid, m);

		cilk_sync;

		//DFW (X11, U12, V21)
		DFW(x, x_row_st, x_col_st, u_row_st, u_col_st + mid, v_row_st + mid, v_col_st, mid, m);
	}

}



int cilk_main(int arc, char * argv[]){
	int n, m;
	int ** x = NULL;
	int ** copy = NULL;
	long long start, end;
	cout << "Enter matrix size: \n";
	cin >> n;
	cout << "Enter base case size: \n";
	cin >> m;
	x = generate_matrix(n);
	copy = copy_matrix(x, n); 

/*
	start = clock();
	AFW_serial(x, 1, 1, 1, 1, 1, 1, n, m);	
	end = clock();
	cout << "Serial execution time: " << (end - start)/double(1000) << endl; 
*/	
	cout << "Original matrix: " << endl;
	print_matrix(x, n);	
	start = clock();
	AFW(copy, 1, 1, 1, 1, 1, 1, n, m);
	end = clock();
	cout << "Parallel execution time: " << (end - start)/double(1000) << endl; 
	print_matrix(copy, n);
	return 0;
}
