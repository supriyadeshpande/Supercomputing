#include <cilk.h>
#include <cilkview.h>
#include <iostream>
#include <ctime>
#include "headers/graph.h"

void fw_iterative(int ** matrix, int n){
	int i,j,k = 0;

	for(k = 1; k <= n; k++){
		for(i = 1; i <= n; i++){
			for(j = 1; j <= n; j++){
				if(matrix[i][j] > matrix[i][k] + matrix[k][j])
					matrix[i][j] = matrix[i][k] + matrix[k][j];
			}
		}
	}

}

//Iterative FW using cilk_for
void fw_iterative_parallel(int ** matrix, int n){
	int k;
	for(k = 1; k <= n; k++){
		cilk_for(unsigned int i = 1; i <= n; i++){
			cilk_for(unsigned int j = 1; j <= n; j++){
				if(matrix[i][j] > matrix[i][k] + matrix[k][j])
					matrix[i][j] = matrix[i][k] + matrix[k][j];
			}
		}
	}

}

int cilk_main(int argc, char * argv[]){
	int n, i, j;
	long long start, end;
	char * filename = (char *)malloc(100);
	strcpy(filename, "input/input1.txt");
	int ** matrix = NULL;

	matrix = read_matrix_from_file(filename);
	//FUNCTION DEFINITION PENDING
	//n = read_matrix_size_from_file(filename);
/*
	copy = copy_matrix(matrix, n);

	start = clock();
	fw_iterative(matrix, n);
	end = clock();
	std::cout << "Serial execution time: " << (end - start)/double(1000) << std::endl; 
	delete[] matrix;
	start = clock();
	fw_iterative_parallel(copy, n);
	end = clock();
	std::cout << "Parallel execution time: " << (end - start)/double(1000) << std::endl; 
	delete[] copy;
*/
}





