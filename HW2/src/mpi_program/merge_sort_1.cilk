#include <cilk.h>
#include <string.h>
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include "../headers/array.h"

using namespace std;

//Used for Base case: Sort numbers from x[start] to x[end]
void insertion_sort(double * x, long start, long end){
        if(start >= end)
                return;
        long i,j;
        for(i = start+1; i <= end; i++){
                long currIndex = i;
                for(j = i-1; j >= start; j--){
                        if(x[j] > x[currIndex]){
                                swap(x, j, currIndex);
                                currIndex = j;
                        }
                        else
                                break;
                }
        }
}


//Merge x[start] to x[mid], x[mid+1] to x[end]
void merge(double * x, long start, long mid, long end){

        if(end <= start)
                return;

        long leftSize = mid - start + 1;
        long rightSize = end - mid;
        double * left = new double[leftSize];
        double * right = new double[rightSize];

        memcpy(left, x + start, leftSize*sizeof(double));
        memcpy(right, x + mid + 1, rightSize*sizeof(double));

        long i=0, j=0, k=start;
        while(i < leftSize && j < rightSize){
                if(left[i] <= right[j])
                        x[k++] = left[i++];
                else
                        x[k++] = right[j++];
        }

        while(i < leftSize)
                x[k++] = left[i++];

        while(j < rightSize)
                x[k++] = right[j++];

        delete[] left;
        delete[] right;
}


//Sort x[start] to x[end]
//NOTE: m is the base case size.
void par_merge_sort_SM(double * x, long start, long end, long m){
        long n = end - start + 1;
        if(n <= m){
                insertion_sort(x, start, end);
                return;
        }

        long mid = start + (end - start)/2;
        cilk_spawn par_merge_sort_SM(x, start, mid, m);
        par_merge_sort_SM(x, mid+1, end, m);
        cilk_sync;

        merge(x, start, mid, end);
}

